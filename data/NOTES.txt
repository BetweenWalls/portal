
// Function Organization:
/*
......................... basic
	startup
	reset
	init
	clearIconSources
	setIconSources
	updateSkillIcons
	changeLevel
	setIronGolem
	resetSkills
	resetEquipment
	resetCharms
	resetCorruptions
	toggleQuests
	toggleRunning
	changeVersion
	changeDifficulty
	toggleCoupling
	toggleAutocast
	changeMonster
	loadMonsters
	round
	getId
	getBaseId
	
......................... dropdown_choices
	corrupt
	equipMerc
	equip
	checkWield
	reloadOffhandCorruptions
	adjustCorruptionSockets
	addCharm
	addSocketable
	
......................... dropdown_setup
	loadEquipment
	loadItems
	loadMisc
	loadSocketables
	loadCorruptions
	loadGolem
	loadMerc
	setMercenary
	updateMercenary
	getMercenaryAuraLevel
	
......................... effects
	addEffect
	initializeEffect
	setEffectData
	rightClickEffect
	leftClickEffect
	removeEffect
	toggleEffect
	disableEffect
	enableEffect
	updateAllEffects
	updateEffect
	adjustStackedAuras
	hoverEffectOn
	hoverEffectOff
	resetEffects
	getAuraData
	getCSkillData
	getCTCSkillData
	getMiscData
	
......................... file_save_and_load
	getCharacterInfo
	saveTextAsFile
	destroyClickedElement
	loadFileAsText
	parseFile
	setCharacterInfo
	
......................... inventory
	getItemImage
	itemSelect
	socketableSelect
	itemHover
	itemOut
	equipmentHover
	equipmentOut
	getAffixLine
	inventoryLeftClick
	inventoryRightClick
	changeBase
	
......................... inventory_drag_and_drop
	allowDrop
	drag
	drop
	trash
	handleSocket
	socket
	allowSocket
	dragSocketable
	trashSocketable
	
......................... stat_and_skill_choices
	addStat
	removeStat
	skillUp
	skillDown
	skillHover
	skillOut
	showBaseLevels
	hoverStatOn
	hoverStatOff
	
......................... updating
	update
	getWeaponDamage
	getNonPhysWeaponDamage
	updateStats
	updatePrimaryStats
	updateSecondaryStats
	updateTertiaryStats
	updateCTC
	updateChargeSkills
	updateOther
	removeInvalidSockets
	calculateSkillAmounts
	checkRequirements
	updateSkills
	checkSkill
	checkIronGolem
	checkOffhand
	updateSocketTotals
	
......................... class files
	getSkillData
	getBuffData
	getSkillDamage
*/


// Notes for Organization Overhaul:
//   TODO...
//   variable names for item classification 
//		slot - equipment slot for item  ("helm","armor","boots","gloves","belt","amulet","ring1","ring2","weapon","offhand")
//		group - similar to slot, but generalized for the item  ("helm","armor","boots","gloves","belt","amulet","ring","weapon","offhand","charm","socketable")
//		subgroup - in between group/type, maybe? might allow "helm","shield", and combo weapons ("throwing weapon","amazon_weapon"...) to be used via the same variable? or would a true/false system (so multiple variables can be checked) be more convenient?
//		type - more specific to the item  ("armor","boots","gloves","belt","amulet","ring","charm" are the same, but "helm","weapon","offhand","socketable" have more variety - "helm","circlet","barbarian helm","druid helm",    "axe","mace","sword","dagger","throwing weapon","javelin","spear","polearm","bow","crossbow","staff","wand","scepter","claw","orb","amazon weapon",    "shield","paladin shield","necromancer shield","quiver",    "jewel","rune","gem","misc")
//		subtype - "club","mace","hammer"?
//   variable names for item affixes
//		item affix variables (from item_affixes.js) can be converted to whatever is needed 1:1 (so variables being worked with may be more human-readable)
//		item affix codes (used in filters) cannot all be converted 1:1 from other variables
//			sometimes multiple codes refer to the same variable
//			sometimes codes refer to calculated values
//		min/max damage variables
//			damage over time
//				poison damage - values used for calculation (from item_affixes.js or elsewhere) are different than tooltip displayed values
//				...how to calculate from poison 'bitrate'?
//				burning damage - should this have its own variables?
//			variable names (e.g. fDamage_min, fDamage_max, fDamage)
//				replace fDamage (percent bonus) with bonus_fDamage
//				...same for other 3 elements, magic, & physical
//		e_def/defense_bonus - distinction needed?
//		e_damage/damage_bonus - distinction needed?
//   data organization for item affixes
//		available affixes
//			when base item is updated (ilvl, group, type, base, rarity, name), available affixes may change (any affix that is already selected should remain selected if possible)
//			...add variables to 'data' to store selected categories/values so they can be easily compared to list of newly available affix categories 
//			...maybe info can be shown when considering things in the opposite direction? for example, show the ilvl range for the currently available affixes?
//   user interface
//		is there a way to indicate if/when an item's filter display would change?  (so the user doesn't need to test so many combinations)
//		...maybe just using non-item differences like CLVL, DIFFICULTY, CHARSTAT15, etc.
//